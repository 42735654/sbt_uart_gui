$include "./stdlib.evm"
$include "./common.evm"

global8u CALLED_ID_COMMON_INIT = 0;
global8u CALLED_ID_UI_INIT = 1;
global8u CALLED_ID_UART_READ = 2;
global8u CALLED_ID_UI_CHANGED_ARG = 3;

global8u CMD_SET_PARAM	= 1;
global8u CMD_QUERY_STAT	= 2;
global8u CMD_WIFI_STAT	= 3;
global8u CMD_PRODUCT_TEST	= 4;
global8u CMD_REPLY_STAT	= 100;
global8u CMD_ASK_PRODUCT	= 101;

//下位机状态缓存
array8u shared_uart_stat[256];
//输出调试信息
array8u fmt[512];
//串口发送缓冲区
array8u uart_send_buf[512];
//串口接受缓冲区
array8u uart_recv_buf[512];
//波特率
global baud_rate = 9600;
//QT调用虚拟机的参数
global8u share_called_id = 0; 

$struct{
	$member global8u 	type = 3;				//控件的类型,1--pushbotton,2--暂未实现，3--标签与输入框结合，通常使用3；
	$member global8u   	index = 0;				//控件类型为3时表示控件对应的数据在uart_stat中的索引号，类型为1时表示按下按钮的回调ID；
	$member array8u    	name[40] = "开关";		//控件名称
}power;
$struct{
	$member global8u 	type = 3;				
	$member global8u   	index = 1;				
	$member array8u    	name[40] = "设置温度";		
}temp;
$struct{
	$member global8u 	type = 3;				
	$member global8u   	index = 2;				
	$member array8u    	name[40] = "温度单位";		
}temp_unit;
$struct{
	$member global8u 	type = 3;				
	$member global8u   	index = 4;				
	$member array8u    	name[40] = "功率";		
}heat_level;
$struct{
	$member global8u 	type = 3;				
	$member global8u   	index = 5;				
	$member array8u    	name[40] = "童锁";		
}lock;
$struct{
	$member global8u 	type = 3;				
	$member global8u   	index = 50;				
	$member array8u    	name[40] = "WI-FI状态";		
}wifi_stat;
$struct{
	$member global8u 	type = 1;				//控件的类型,1--pushbotton,2--暂未实现，3--标签与输入框结合，通常使用3；
	$member global8u   	call_id = 10;			//控件类型为3时表示控件对应的数据在uart_stat中的索引号，类型为1时表示按下按钮的回调ID。即
												//当这个按钮按下时，QT会调用虚拟机main函数中该call_id对应的代码；
	$member array8u    	name[40] = "产测";		//控件名称
}pt_botton;
function ui_updata()
{
	refresh_ui();
}
function ui_init()
{
	add_widget(&pt_botton);
	add_widget(&power);
	add_widget(&temp);
	add_widget(&temp_unit);
	add_widget(&heat_level);
	add_widget(&wifi_stat);
	ui_updata();
}
function checksum_calc(buf, len)
{
	local i;
	local sum;
	sum = 0;
	for (i = 0; i < len; i++){
		sum += $ptr8u[buf, i];
	}
	return sum;
}
function generate_uart_send_buf(cmd, buf, len)
{
	local i;
	memset(&uart_send_buf, 0 , sizeof(uart_send_buf));
    uart_send_buf[0] = 0xFF;
    uart_send_buf[1] = 0xAA;
    uart_send_buf[2] = cmd;
    uart_send_buf[3] = 1;//设备类型
    uart_send_buf[4] = len;
	for (i = 0; i < len; i++){
		uart_send_buf[5 + i] = $ptr8u[buf, i];
	}
    uart_send_buf[len + 5] = checksum_calc(&uart_send_buf, len + 5);
	return len + 5 + 1;
}
function uart_reply()
{
	local n;
	n = generate_uart_send_buf(CMD_REPLY_STAT, &shared_uart_stat, 14);
	uart_send(&uart_send_buf, n);
}
function cmd_handle(cmd)
{
	local i;
	if (cmd == CMD_SET_PARAM){
		$$fmt = "参数设置";
		log_to_ui(&fmt);
		for (i = 0; i < 7; i++){
			shared_uart_stat[i] = uart_recv_buf[i + 5];
		}
		ui_updata();
	}else if (cmd == CMD_QUERY_STAT){
		uart_reply();
	}else if (cmd == CMD_WIFI_STAT){
		shared_uart_stat[wifi_stat.index] = uart_recv_buf[5];
		ui_updata();
	}else if (cmd == CMD_PRODUCT_TEST){
		$$fmt = "产测成功！";
		log_to_ui(&fmt);
	}else{
		$$fmt = "未知命令号：%d";
		log_to_ui(&fmt, cmd);
	}
}
//这个函数内读取
function handle_uart_data()
{
	local n;
	local i;
	
	uart_peek(&uart_recv_buf, 1);
	//qt串口缓存中有命令报文,根据串口协议来读取数据
	if (uart_recv_buf[0] == 0xff){
		if (uart_bytes_available() < 5){
			return -1;
		}else{
			uart_peek(&uart_recv_buf, 5);
			n = uart_recv_buf[4];
			i = 5 + n + 1;
			if (uart_bytes_available() < i){
				return -1;
			}else{
				n = uart_read(&uart_recv_buf, i);
				cmd_handle(uart_recv_buf[2]);
			}
		}
	}
	else{
		//串口数据不是命令
		n = uart_peek(&uart_recv_buf, uart_bytes_available());
		uart_recv_buf[n] = 0;
		//有一行数据，读取出来直接输出显示
		if (strchr(&uart_recv_buf, 10)){   //10 =='\n'
			n = uart_read_line(&uart_recv_buf, sizeof(uart_recv_buf));
			uart_recv_buf[n] = 0;
			$$fmt = "%s";
			log_to_ui(&fmt, &uart_recv_buf);
			return 0;
		}else{
			return -1;
		}
	}
}
array8u before_main_flag[50] = "THIS_IS_USED_TO_CALC_BEGIN_ADDR_OF_MAIN_FUNCTION!";
function main()
{
	local n;
	//初始化共享内存地址
	if (share_called_id == CALLED_ID_COMMON_INIT){
		set_addr_to_qt(&share_called_id, &shared_uart_stat);
		set_baud_rate(baud_rate);
	}
	//初始化UI界面
	else if(share_called_id == CALLED_ID_UI_INIT)	{
		ui_init();
	}
	//串口数据处理
	else if (share_called_id == CALLED_ID_UART_READ){
		handle_uart_data();
	}else if (share_called_id == pt_botton.call_id){
		n = generate_uart_send_buf(CMD_ASK_PRODUCT, 0, 0);
		uart_send(&uart_send_buf, n);
		$$fmt = "%s";
		log_to_ui(&fmt, &pt_botton.name);
	}
	//界面有参数改变，此时串口缓冲区已经被QT设置，这里只负责组包给设备上报串口数据
	else if (share_called_id == CALLED_ID_UI_CHANGED_ARG){
		uart_reply();
	}else{
		$$fmt = "未知VM调用：id=%d";
		log_to_ui(&fmt, share_called_id);
		return 0;
	}
}
